version: '3.9'
services:
  cr_node_1:
      container_name: cr_node_1
      image: ${COCKROACH_IMAGE}
      volumes:
          - ./data/cr_node_1/data:/cockroach/cockroach-data:rw
          - ./data/cr_node_1/certs:/certs:ro
      command: start --certs-dir=/certs --advertise-addr=cr_node_1 --join=cr_node_1,cr_node_2,cr_node_3
      ports:
          - "26257:26257"
          - "8080:8080"
      healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
          interval: 30s
          timeout: 10s
          retries: 3
      networks:
          - network_cockroachdb

  cr_node_2:
      container_name: cr_node_2
      image: ${COCKROACH_IMAGE}
      volumes:
          - ./data/cr_node_2/data:/cockroach/cockroach-data:rw
          - ./data/cr_node_2/certs:/certs:ro
      command: start --certs-dir=/certs --advertise-addr=cr_node_2 --join=cr_node_1,cr_node_2,cr_node_3
      ports:
          - "26258:26257"
          - "8081:8080"
      networks:
          - network_cockroachdb
  
  cr_node_3:
      container_name: cr_node_3
      image: ${COCKROACH_IMAGE}
      volumes:
          - ./data/cr_node_3/data:/cockroach/cockroach-data:rw
          - ./data/cr_node_3/certs:/certs:ro
      command: start --certs-dir=/certs --advertise-addr=cr_node_3 --join=cr_node_1,cr_node_2,cr_node_3
      ports:
          - "26259:26257"
          - "8082:8080"
      networks:
          - network_cockroachdb
  
  cr_init:
      container_name: init_cr
      image: ${COCKROACH_IMAGE}
      volumes:
        - ./data/cr_node_1/certs:/certs:ro
        - ./scripts:/scripts
      environment:
        - COCKROACH_DATABASE=${COCKROACH_DATABASE}
        - COCKROACH_USER=${COCKROACH_USER}
        - COCKROACH_PASSWORD=${COCKROACH_PASSWORD}
      entrypoint: /scripts/wait-for.sh 5 /scripts/init_cr.sh
      depends_on:
        cr_node_1:
          condition: service_started
        cr_node_2:
          condition: service_started
        cr_node_3:
          condition: service_started
      networks:
        - network_cockroachdb
  
  spicedb_migrate:
      container_name: spicedb_migrate
      image: ${SPICEDB_IMAGE}
      volumes:
        - ./data/cr_node_1/certs:/certs:ro
      command: >
        migrate head 
        --datastore-engine=cockroachdb 
        --datastore-conn-uri="postgres://${COCKROACH_USER}:${COCKROACH_PASSWORD}@cr_node_1:26257/${COCKROACH_DATABASE}?sslmode=require&sslrootcert=/certs/ca.crt&sslcert=/certs/client.root.crt&sslkey=/certs/client.root.key"
      depends_on:
        # When the first node believes it is ready.
        cr_node_1:
          condition: service_healthy
        # When the first node has been initialized and has the correct database permissions.
        cr_init:
          condition: service_completed_successfully
      networks:
        - network_cockroachdb
  
  spicedb:
      container_name: spicedb
      image: ${SPICEDB_IMAGE}
      volumes:
        - ./data/cr_node_1/certs:/certs:ro
      command: >
        serve
        --grpc-preshared-key "${SPICEDB_GRPC_KEY}" 
        --datastore-engine=cockroachdb 
        --datastore-conn-uri="postgres://${COCKROACH_USER}:${COCKROACH_PASSWORD}@cr_node_1:26257/${COCKROACH_DATABASE}?sslmode=require&sslrootcert=/certs/ca.crt&sslcert=/certs/client.root.crt&sslkey=/certs/client.root.key" 
        --telemetry-endpoint=""
      depends_on:
        # When a migration has been run or is already ready.
        spicedb_migrate:
          condition: service_completed_successfully
      ports:
        - "50051:50051"
      networks:
        - network_cockroachdb

networks:
    network_cockroachdb:
        driver: bridge
